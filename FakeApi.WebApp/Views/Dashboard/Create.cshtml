@model FakeApi.Domain.Dtos.RestMockEditDto

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>RestMockEditDto</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Path, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Path, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Path, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Verb, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label class="radio-inline">
                    <input type="radio" id="optGet" value="GET" name="Verb" checked> GET
                </label> <label class="radio-inline">
                    <input type="radio" id="optPost" value="POST" name="Verb"> POST
                </label> <label class="radio-inline">
                    <input type="radio" id="optPut" value="PUT" name="Verb"> PUT
                </label> <label class="radio-inline">
                    <input type="radio" id="optPatch" value="PATCH" name="Verb"> PATCH
                </label> <label class="radio-inline">
                    <input type="radio" id="optDelete" value="DELETE" name="Verb"> DELETE
                </label> <label class="radio-inline">
                    <input type="radio" id="optOptions" value="OPTIONS" name="Verb"> OPTIONS
                </label>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ResponseStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="ResponseStatus" class="form-control">
                    <option value="100">100 - Continue</option>
                    <option value="101">101 - Switching Protocols</option>
                    <option value="102">102 - Processing</option>
                    <option value="200" selected>200 - OK</option>
                    <option value="201">201 - Created</option>
                    <option value="202">202 - Accepted</option>
                    <option value="203">203 - Non-Authoritative Information</option>
                    <option value="204">204 - No Content</option>
                    <option value="205">205 - Reset Content</option>
                    <option value="206">206 - Partial Content</option>
                    <option value="207">207 - Multi-Status</option>
                    <option value="208">208 - Already Reported</option>
                    <option value="226">226 - IM Used</option>
                    <option value="300">300 - Multiple Choices</option>
                    <option value="301">301 - Moved Permanently</option>
                    <option value="302">302 - Found</option>
                    <option value="303">303 - See Other</option>
                    <option value="304">304 - Not Modified</option>
                    <option value="305">305 - Use Proxy</option>
                    <option value="306">306 - Switch Proxy</option>
                    <option value="307">307 - Temporary Redirect</option>
                    <option value="308">308 - Permanent Redirect</option>
                    <option value="400">400 - Bad Request</option>
                    <option value="401">401 - Unauthorized</option>
                    <option value="402">402 - Payment Required</option>
                    <option value="403">403 - Forbidden</option>
                    <option value="404">404 - Not Found</option>
                    <option value="405">405 - Method Not Allowed</option>
                    <option value="406">406 - Not Acceptable</option>
                    <option value="407">407 - Proxy Authentication Required</option>
                    <option value="408">408 - Request Timeout</option>
                    <option value="409">409 - Conflict</option>
                    <option value="410">410 - Gone</option>
                    <option value="411">411 - Length Required</option>
                    <option value="412">412 - Precondition Failed</option>
                    <option value="413">413 - Request Entity Too Large</option>
                    <option value="414">414 - Request-URI Too Long</option>
                    <option value="415">415 - Unsupported Media Type</option>
                    <option value="416">416 - Requested Range Not Satisfiable</option>
                    <option value="417">417 - Expectation Failed</option>
                    <option value="419">419 - Authentication Timeout</option>
                    <option value="420">420 - Enhance Your Calm</option>
                    <option value="422">422 - Unprocessable Entity</option>
                    <option value="423">423 - Locked</option>
                    <option value="424">424 - Failed Dependency</option>
                    <option value="424">424 - Method Failure</option>
                    <option value="426">426 - Upgrade Required</option>
                    <option value="428">428 - Precondition Required</option>
                    <option value="429">429 - Too Many Requests</option>
                    <option value="431">431 - Request Header Fields Too Large</option>
                    <option value="444">444 - No Response</option>
                    <option value="449">449 - Retry With</option>
                    <option value="450">450 - Blocked by Windows Parental Controls</option>
                    <option value="451">451 - Unavailable For Legal Reasons</option>
                    <option value="451">451 - Redirect</option>
                    <option value="494">494 - Request Header Too Large</option>
                    <option value="495">495 - Cert Error</option>
                    <option value="496">496 - No Cert</option>
                    <option value="497">497 - HTTP to HTTPS</option>
                    <option value="500">500 - Internal Server Error</option>
                    <option value="501">501 - Not Implemented</option>
                    <option value="502">502 - Bad Gateway</option>
                    <option value="503">503 - Service Unavailable</option>
                    <option value="504">504 - Gateway Timeout</option>
                    <option value="505">505 - HTTP Version Not Supported</option>
                    <option value="506">506 - Variant Also Negotiates</option>
                    <option value="507">507 - Insufficient Storage</option>
                    <option value="508">508 - Loop Detected</option>
                    <option value="509">509 - Bandwidth Limit Exceeded</option>
                    <option value="510">510 - Not Extended</option>
                    <option value="511">511 - Network Authentication Required</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContentType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group">
                    <div class="input-group-btn">
                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"> Choose <span class="caret"></span></button>
                        <ul class="dropdown-menu">
                            <li><a id="content-type-1" onclick="changeContentType('application/json')">application/json</a></li>
                            <li><a id="content-type-2" onclick="changeContentType('application/xml')">application/xml</a></li>
                            <li><a id="content-type-3" onclick="changeContentType('text/xml')">text/xml</a></li>
                            <li><a id="content-type-4" onclick="changeContentType('text/json')">text/json</a></li>
                            <li><a id="content-type-5" onclick="changeContentType('text/plain')">text/plain</a></li>
                            <li class="divider"></li>
                            <li><a id="content-type-6" onclick="changeContentType('')">Other</a></li>
                        </ul>
                    </div>

                    <input type="text" class="form-control" id="ContentType">
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContentEncoding, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" name="ContentEncoding" value="UTF-8" class="form-control" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ResponseBody, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ResponseBody, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ResponseBody, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<script>
    function changeContentType(value) {
        $('#ContentType').val(value);
    }
</script>