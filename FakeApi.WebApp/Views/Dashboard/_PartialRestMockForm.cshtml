@model FakeApi.Domain.Dtos.RestMockEditDto

@{
    List<SelectListItem> responseStatusList = ViewBag.ResponseStatusList;
    List<SelectListItem> verbList = ViewBag.VerbList;
}

<div class="form-group">
    @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Path, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Path, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Path, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Verb, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @foreach (var item in verbList)
        {
            <text>
            <label class="radio-inline">
                <input type="radio" id="@item.Value" value="@item.Value" name="Verb" @(item.Selected ? "checked" : "") > @item.Text  
            </label>
            </text>
        }
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.ResponseStatus, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.DropDownListFor(model => model.ResponseStatus, responseStatusList, "--", new { @class = "form-control" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.ContentType, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        <div class="input-group">
            <div class="input-group-btn">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"> Choose <span class="caret"></span></button>
                <ul class="dropdown-menu">
                    <li><a onclick="changeContentType('application/json')">application/json</a></li>
                    <li><a onclick="changeContentType('application/xml')">application/xml</a></li>
                    <li><a onclick="changeContentType('text/xml')">text/xml</a></li>
                    <li><a onclick="changeContentType('text/json')">text/json</a></li>
                    <li><a onclick="changeContentType('text/plain')">text/plain</a></li>
                    <li class="divider"></li>
                    <li><a onclick="changeContentType('')">Other</a></li>
                </ul>
            </div>

            @Html.EditorFor(model => model.ContentType, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.ContentEncoding, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        <input type="text" name="ContentEncoding" value="UTF-8" class="form-control" />
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.ResponseBody, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.TextAreaFor(model => model.ResponseBody, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ResponseBody, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        <div class="checkbox">
            @Html.EditorFor(model => model.Active)
            @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
        </div>
    </div>
</div>

<div class="form-group">
    <div class="col-md-offset-2 col-md-10 text-right">
        <a href="@Url.Action("Index", "Dashboard")" class="btn btn-default">Cancelar</a>
        <input type="submit" value="Salvar" class="btn btn-primary" />
    </div>
</div>